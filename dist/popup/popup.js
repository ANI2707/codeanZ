(()=>{class e{constructor(){this.apiKey="",this.init()}async init(){this.bindEvents(),await this.loadApiKey(),await this.loadHistory(),this.updateUI()}bindEvents(){document.getElementById("saveApiKey").addEventListener("click",()=>this.saveApiKey()),document.getElementById("apiKeyInput").addEventListener("keypress",e=>{"Enter"===e.key&&this.saveApiKey()}),document.getElementById("analyzeBtn").addEventListener("click",()=>this.analyzeCode()),document.getElementById("codeInput").addEventListener("keydown",e=>{e.ctrlKey&&"Enter"===e.key&&this.analyzeCode()}),document.getElementById("clearHistory").addEventListener("click",()=>this.clearHistory()),document.getElementById("openWebApp").addEventListener("click",()=>this.openWebApp()),document.getElementById("settings").addEventListener("click",()=>this.openSettings())}async loadApiKey(){try{const e=await chrome.storage.sync.get(["dsa_analyzer_api_key"]);this.apiKey=e.dsa_analyzer_api_key||"",document.getElementById("apiKeyInput").value=this.apiKey}catch(e){console.error("Failed to load API key:",e)}}async saveApiKey(){const e=document.getElementById("apiKeyInput").value.trim();if(e)if(e.startsWith("sk-"))try{await chrome.storage.sync.set({dsa_analyzer_api_key:e}),this.apiKey=e,this.showMessage("API key saved successfully!","success"),this.updateUI()}catch(e){this.showMessage("Failed to save API key","error")}else this.showMessage('API key should start with "sk-"',"error");else this.showMessage("Please enter a valid API key","error")}async analyzeCode(){const e=document.getElementById("codeInput"),t=document.getElementById("languageSelect"),s=(document.getElementById("analyzeBtn"),e.value.trim()),n=t.value;if(s)if(this.apiKey){this.setAnalyzeLoading(!0);try{const e=await this.callAnalysisAPI({code:s,language:n,apiKey:this.apiKey});if(e.error)throw new Error(e.error);this.displayResults(e.result),await this.saveToHistory({code:s,language:n,result:e.result}),await this.loadHistory()}catch(e){this.showMessage(`Analysis failed: ${e.message}`,"error")}finally{this.setAnalyzeLoading(!1)}}else this.showMessage("Please configure your API key first","error");else this.showMessage("Please enter some code to analyze","error")}async callAnalysisAPI(e){return new Promise(t=>{chrome.runtime.sendMessage({action:"analyze",...e},t)})}displayResults(e){const t=document.getElementById("resultsSection");document.getElementById("resultsContent").innerHTML=`\n      <div class="complexity-result">\n        <h3>\n          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n            <circle cx="12" cy="12" r="10"></circle>\n            <polyline points="12,6 12,12 16,14"></polyline>\n          </svg>\n          Time Complexity\n          <span class="complexity-badge">${e.timeComplexity.bigO}</span>\n        </h3>\n        <p class="complexity-explanation">${e.timeComplexity.explanation}</p>\n      </div>\n\n      <div class="complexity-result">\n        <h3>\n          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n            <path d="M9 19c-5 0-8-3-8-8s3-8 8-8 8 3 8 8-3 8-8 8z"></path>\n            <path d="M9 9h3l3 4-3 4h-3V9z"></path>\n          </svg>\n          Space Complexity\n          <span class="complexity-badge">${e.spaceComplexity.bigO}</span>\n        </h3>\n        <p class="complexity-explanation">${e.spaceComplexity.explanation}</p>\n      </div>\n\n      ${e.suggestions.length>0?`\n        <div class="complexity-result">\n          <h3>\n            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">\n              <circle cx="12" cy="12" r="10"></circle>\n              <path d="m9 12 2 2 4-4"></path>\n            </svg>\n            Optimization Suggestions\n          </h3>\n          <ul style="margin-left: 16px; font-size: 13px; color: var(--text-secondary);">\n            ${e.suggestions.map(e=>`<li>${e}</li>`).join("")}\n          </ul>\n        </div>\n      `:""}\n\n      <button id="viewDetailed" class="btn-primary" style="width: 100%; margin-top: 12px;">\n        View Detailed Analysis\n      </button>\n    `,document.getElementById("viewDetailed").addEventListener("click",()=>{this.openDetailedView(e)}),t.style.display="block"}async loadHistory(){try{const e=(await chrome.storage.local.get(["analysis_history"])).analysis_history||[],t=document.getElementById("historyContent");if(0===e.length)return void(t.innerHTML='<p style="text-align: center; color: var(--text-muted); font-size: 13px; padding: 20px;">No recent analysis</p>');t.innerHTML=e.slice(0,5).map(e=>`\n        <div class="history-item" data-id="${e.id}">\n          <div class="history-info">\n            <span class="history-language">${e.language}</span>\n            <span class="history-time">${this.formatTime(e.timestamp)}</span>\n          </div>\n          <div style="font-size: 12px; color: var(--text-muted);">\n            ${e.result.timeComplexity.bigO} | ${e.result.spaceComplexity.bigO}\n          </div>\n        </div>\n      `).join(""),t.querySelectorAll(".history-item").forEach(t=>{t.addEventListener("click",()=>{const s=t.dataset.id,n=e.find(e=>e.id===s);n&&this.loadHistoryItem(n)})})}catch(e){console.error("Failed to load history:",e)}}loadHistoryItem(e){document.getElementById("codeInput").value=e.code,document.getElementById("languageSelect").value=e.language,this.displayResults(e.result)}async saveToHistory(e){try{const t=(await chrome.storage.local.get(["analysis_history"])).analysis_history||[],s={id:Date.now().toString(),timestamp:(new Date).toISOString(),...e};t.unshift(s),t.length>50&&t.splice(50),await chrome.storage.local.set({analysis_history:t})}catch(e){console.error("Failed to save to history:",e)}}async clearHistory(){if(confirm("Are you sure you want to clear all analysis history?"))try{await chrome.storage.local.remove(["analysis_history"]),await this.loadHistory(),this.showMessage("History cleared","success")}catch(e){this.showMessage("Failed to clear history","error")}}setAnalyzeLoading(e){const t=document.getElementById("analyzeBtn"),s=t.querySelector(".btn-text"),n=t.querySelector(".btn-loading");t.disabled=e,s.style.display=e?"none":"inline-flex",n.style.display=e?"inline-flex":"none"}updateUI(){document.getElementById("apiKeyStatus").className="status-indicator "+(this.apiKey?"connected":"")}showMessage(e,t){document.querySelectorAll(".error-message, .success-message").forEach(e=>e.remove());const s=document.createElement("div");s.className=`${t}-message`,s.textContent=e,document.getElementById("apiKeySection").appendChild(s),setTimeout(()=>s.remove(),3e3)}openDetailedView(e){const t=chrome.runtime.getURL("popup/detailed.html")+`?data=${encodeURIComponent(JSON.stringify(e))}`;chrome.tabs.create({url:t})}openWebApp(){chrome.tabs.create({url:"https://your-web-app-url.com"})}openSettings(){chrome.runtime.openOptionsPage()}formatTime(e){const t=new Date-new Date(e);return t<6e4?"Just now":t<36e5?`${Math.floor(t/6e4)}m ago`:t<864e5?`${Math.floor(t/36e5)}h ago`:`${Math.floor(t/864e5)}d ago`}}document.addEventListener("DOMContentLoaded",()=>new e)})();