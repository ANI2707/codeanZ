new class{constructor(){this.init()}init(){chrome.runtime.onMessage.addListener(this.handleMessage.bind(this)),chrome.action.onClicked.addListener(this.handleActionClick.bind(this)),chrome.runtime.onInstalled.addListener(this.handleInstall.bind(this))}handleMessage(e,a,t){switch(e.action){case"analyze":return this.handleAnalyzeRequest(e,a,t),!0;case"saveApiKey":return this.saveApiKey(e.apiKey,t),!0;case"getApiKey":return this.getApiKey(t),!0;default:t({error:"Unknown action"})}}async handleAnalyzeRequest(e,a,t){try{const a=(await chrome.storage.sync.get(["dsa_analyzer_api_key"])).dsa_analyzer_api_key;if(!a)return void t({error:"API key not configured"});const n=await this.analyzeCode({code:e.code,language:e.language,apiKey:a});await this.saveToHistory({code:e.code,language:e.language,result:n,platform:e.platform,url:e.url}),t({success:!0,result:n})}catch(e){t({error:e.message})}}async analyzeCode({code:e,language:a,apiKey:t}){const n=`Analyze this ${a} code for time and space complexity:\n\n    \`\`\`${a}\n    ${e}\n    \`\`\`\n\n    Provide detailed complexity analysis with explanations.`,s=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{Authorization:`Bearer ${t}`,"Content-Type":"application/json"},body:JSON.stringify({model:"gpt-4",messages:[{role:"system",content:'You are an expert algorithm analyst. Analyze code for time and space complexity.\n\n      CRITICAL: Respond with ONLY a valid JSON object. No explanatory text, no markdown formatting, no code blocks.\n\n    Return a JSON response with this exact structure:\n    {\n      "timeComplexity": {\n        "bigO": "O(n)",\n        "bestCase": "O(1)",\n        "averageCase": "O(n)",\n        "worstCase": "O(n)",\n        "explanation": "detailed explanation",\n        "codeHighlights": [\n          {\n            "startLine": 1,\n            "endLine": 3,\n            "type": "loop",\n            "contribution": "Linear iteration",\n            "complexity": "O(n)"\n          }\n        ],\n        "confidence": 95\n      },\n      "spaceComplexity": {\n        "bigO": "O(1)",\n        "bestCase": "O(1)",\n        "averageCase": "O(1)",\n        "worstCase": "O(1)",\n        "explanation": "detailed explanation",\n        "codeHighlights": [],\n        "confidence": 98\n      },\n      "explanation": "Overall analysis",\n      "suggestions": ["optimization suggestions"],\n      "algorithmType": "sorting/searching/graph/etc"\n    }'},{role:"user",content:n}],temperature:.1,max_tokens:2e3})});if(!s.ok)throw new Error(`API request failed: ${s.statusText}`);const o=(await s.json()).choices[0].message.content;try{const e=(o.match(/``````/)||[null,o])[1]||o;return JSON.parse(e)}catch(e){throw new Error("Failed to parse analysis response")}}async saveApiKey(e,a){try{await chrome.storage.sync.set({dsa_analyzer_api_key:e}),a({success:!0})}catch(e){a({error:e.message})}}async getApiKey(e){try{e({success:!0,apiKey:(await chrome.storage.sync.get(["dsa_analyzer_api_key"])).dsa_analyzer_api_key||""})}catch(a){e({error:a.message})}}async saveToHistory(e){try{const a=(await chrome.storage.local.get(["analysis_history"])).analysis_history||[],t={id:Date.now().toString(),timestamp:(new Date).toISOString(),...e};a.unshift(t),a.length>50&&a.splice(50),await chrome.storage.local.set({analysis_history:a})}catch(e){console.error("Failed to save to history:",e)}}handleActionClick(e){chrome.action.openPopup()}handleInstall(e){"install"===e.reason&&(chrome.storage.sync.set({dsa_analyzer_settings:{autoAnalyze:!1,showFloatingButton:!0,theme:"auto"}}),chrome.tabs.create({url:chrome.runtime.getURL("popup/welcome.html")}))}};